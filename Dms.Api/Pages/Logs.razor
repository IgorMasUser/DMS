@page "/logs"
@using Dms.Api.Extensions.Utils;
@using Dms.Api.Shared.Components.Common
@using Dms.Core.Application.Common.DTOs;
@using Dms.Core.Application.Common.UIModels.Enums;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Localization;
@using Microsoft.Extensions.Logging;


<PageTitle>@Title</PageTitle>
<style>
    .mud-table-toolbar {
        height: 120px !important;
    }
</style>

<MudDataGrid T="LogDto"
             ServerData="@(ServerReload)"
             FixedHeader="true"
             FixedFooter="false"
             Virtualize="true"
             RowsPerPage="@defaultPageSize"
             Height="calc(100vh - 360px)"
             Style="min-height:700px"
             Loading="@loading"
             CurrentPage="@CurrentPage"
             Hover="true" @ref="table">
    <ToolBarContent>
        <div class="d-flex align-start flex-grow-1">
            <div class="d-flex gap-4">
                <MudIcon Icon="@Icons.Material.Filled.BarChart" Size="Size.Large" />
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.caption">Logs</MudText>

                    <MudEnumSelect Style="min-width:220px" id="LogList-Period" TEnum="LogListView" ValueChanged="OnChangedListView" Value=filterLogListView Dense="true" Label="List View">

                    </MudEnumSelect>
                    @if (filterLogListView == LogListView.CustomRange)
                    {
                        <MudStack>
                            <MudDateRangePicker @ref="picker" DateFormat="dd/MM/yyyy" TitleDateFormat="dddd, dd. MMMM" @bind-DateRange=@dateRange>
                                <PickerActions>
                                    <MudButton Class="mr-auto align-self-start" OnClick="@(() =>picker.Clear())">Clear</MudButton>
                                    <MudButton OnClick="@(() => picker.Close(false))">Cancel</MudButton>
                                    <MudButton Color="Color.Primary" OnClick="@(OnSelectedRangeClickAsync)">Ok</MudButton>
                                </PickerActions>
                            </MudDateRangePicker>
                        </MudStack>
                    }
                </div>


            </div>
            <div class="flex-grow-1" />

            <div class="d-flex flex-column justify-end">
                <div class="d-flex">
                    <MudButton DisableElevation Variant="Variant.Outlined"
                                Size="Size.Small"
                                Disabled="@loading"
                                OnClick="@(OnRefresh)"
                                StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                                Style="margin-right: 5px;">Refresh</MudButton>
                 </div>
                 <MudStack Row="true" AlignItems="AlignItems.Stretch">
                     <MudEnumSelect TEnum="LogLevel?" Placeholder="Log Level" id="LogLevel" Value="@filterLogLevel" Clearable="true" ValueChanged="@(c=>OnChangedLevel(c))" Style="width:160px" FullWidth="true"> </MudEnumSelect>
                     <MudTextField T="string" Style="min-width:300px" ValueChanged="@(OnSearch)" id="Search" Value="@filterKeyword" Placeholder="Search" Adornment="Adornment.End"
                                   AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium">
                     </MudTextField>
                 </MudStack>

             </div>
         </div>

     </ToolBarContent>
     <Columns>
         <HierarchyColumn T="LogDto" ButtonDisabledFunc="@(x => string.IsNullOrEmpty(x.Message))" />
         <PropertyColumn CellStyle="width:15%" Property="x => x.TimeStamp" Title=@currentDto.GetMemberDescription(x => x.TimeStamp)>
             <CellTemplate>
                 @context.Item.TimeStamp
             </CellTemplate>
         </PropertyColumn>
         <PropertyColumn Sortable="false" CellStyle="width:15%" Property="x => x.Level" Title="@currentDto.GetMemberDescription(x => x.Level)">
             <CellTemplate>
                 @switch (context.Item.Level)
                {
                    case "Information":
                        <MudChip Color="Color.Info" Size="Size.Small">@context.Item.Level</MudChip>
                        break;
                    case "Warning":
                        <MudChip Color="Color.Warning" Size="Size.Small">@context.Item.Level</MudChip>
                        break;
                    case "Error":
                        <MudChip Color="Color.Error" Size="Size.Small">@context.Item.Level</MudChip>
                        break;
                    case "Critical":
                        <MudChip Color="Color.Error" Size="Size.Small">@context.Item.Level</MudChip>
                        break;
                    case "Trace":
                    case "Debug":
                    default:
                        <MudChip Size="Size.Small">@context.Item.Level</MudChip>
                        break;
                }
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Sortable="false" CellStyle="width:55%" Property="x => x.Message" Title=@currentDto.GetMemberDescription(x => x.Message) />
    </Columns>
    <ChildRowContent>
        <MudCard Elevation="0">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.body1">
                        <strong>@context.Item.Level</strong>
                    </MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent Class="pt-0">

                <MudText>@currentDto.GetMemberDescription(x => x.Message)</MudText>
                <MudText Typo="Typo.body2">@context.Item.Message</MudText>
                <br />
                @if (!string.IsNullOrEmpty(context.Item.Exception))
                {
                    <MudText Color="Color.Error">@currentDto.GetMemberDescription(x => x.Message)</MudText>
                    <MudText Color="Color.Warning" Typo="Typo.body2">@context.Item.Exception</MudText>
                    <br />
                }

                @if (!string.IsNullOrEmpty(context.Item.CorrelationId))
                {
                    <br />
                    <MudText Color="Color.Error">@currentDto.GetMemberDescription(x => x.CorrelationId)</MudText>
                    <MudText Color="Color.Warning" Typo="Typo.body2">@context.Item.CorrelationId</MudText>
                }
            </MudCardContent>
        </MudCard>
    </ChildRowContent>
    <NoRecordsContent>
        <MudText>NoRecords</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading</MudText>
    </LoadingContent>
    <PagerContent>
        <MudDataGridPager RowsPerPageString=RowsPerPage PageSizeOptions="@(new[] { 10, 15, 30, 50, 100, 500, 1000 })" />
        <MudDataGrid CurrentPage="@CurrentPage" />
    </PagerContent>
</MudDataGrid>